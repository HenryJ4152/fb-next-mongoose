import { unstable_getServerSession } from 'next-auth';
import { authOptions } from './api/auth/[...nextauth]'
import Head from 'next/head'
import { useSelector } from 'react-redux';
import Header from '../components/Header'
import MainLeft from '../components/LeftMain'
import MainCenter from '../components/MainCenter';
import MainRight from '../components/MainRight'
import MessagePopup from '../components/MessagePopup';
import NewMessageButton from '../components/NewMessageButton';
import User from "../models/User"
import { checkUserInDb, fetchAllPosts, ssrGetPosts, ssrGetUsers } from '../utils/helpers';
import Post from '../models/Post'
import connectDB from '../utils/connectDB';
import EditPostModal from '../components/EditPostModal';
import { useEffect } from 'react';
import CreatePostModal from '../components/CreatePostModal';


export default function Home({ session, posts, users }) {


  // console.log("posts: ", posts);
  const creatingPost = useSelector((state) => state.postReducer.creatingPost)
  const editingPost = useSelector((state) => state.postReducer.editingPost)
  const messageOpen = useSelector((state) => state.messageReducer.open)

  useEffect(() => {
    if (editingPost) {
      document.body.style.overflow = 'hidden';
    }
    return () => {
      document.body.style.overflow = 'unset';
    }
  }, [editingPost])


  return (
    <div className=' flex flex-col'>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header users={users} />

      <main className=' flex bg-stone-900 min-h-screen'>
        {/* left section */}
        <MainLeft  />
        {/* posts section */}
        <MainCenter posts={posts} />
        {/* right section */}
        <MainRight users={users} />

        {messageOpen && <MessagePopup />}

        {editingPost && <EditPostModal />}

        {creatingPost && <CreatePostModal />}
      </main>
    </div>
  )
}

export async function getServerSideProps(context) {

  const session = await unstable_getServerSession(context.req, context.res, authOptions)
  // console.log(session);
  // console.log(session.user.id);
  await connectDB()

  let user 
  if (session) {

    const id = session.user.id
    user = await checkUserInDb(session)
  }

  const posts = await ssrGetPosts()
  const users = await ssrGetUsers()

  return {
    props: {
      session,
      posts: JSON.parse(JSON.stringify(posts)),
      users: JSON.parse(JSON.stringify(users))
    }
  }
}


// TODO:
// fix icons in deployed mode - message and friend add story and edit profile icon on userpage
// make a realtime chat app with next mongoose socket 
// connect socket io - pick up msges - vercel does not support. heroku supports socketio
// store image? on firebase?


// DONE: impliment SSR getsession 
// impliment SSR checkUserinDb
// load posts
// edit post with a modal
// like post pushing or pulling id in mongodb array holy shit this took long 
// write comments
// delete comments by remove index in comments array
// edit comments - pull the original comment and push new comment
// comment text area expand show multiple lines
// edit comment text area expand - fix so height doesnt change when change <p> to <textarea>
// comments truncate if too long
// write post modal. text area expand lines
// user page - get user's info using the router.param.userId and hit mongo to get users name email image
/*  hit mongo for all user data */ 
/* use redux determine show search results or not - currently using useState instead. not sure if need change*/ 
// fixed issue with mongodb rounding nextauth user id. still passing session.user.id to _id but also making a id variable with session.user.id.slice(0, 17) 
// search users 
// commenting on userPage does not show comment 
// fix edit comment
// search users in user page
// if on another users page -- dont allow post (for now?)
// include guest user
// guest user post and comment
// send msgs
// only original poster can edit delete post  
// only original commenter can edit delete comments 
// add friend
// useQuery for updated friend status
// issue - send friend request to one user is ok. go to another profile and send friend request the ui is not updating - the data after sending request is stale so it does not show req was sent but mongo did receive it - issue with queryClient.invalidate not calling after routing to another dynamic page. fixed this issue by grabbing the data object form useMutation's onSuccess which is the object that is returned from hitting mongoDB so we can check the changes in the document and use that to change the UI 
// open chat and send msg scroll to bottom
// guest user no add friend button





